[0m[[0m[0mdebug[0m] [0m[0mThe codility.TapeEquilibrium$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(Idx,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(TapeEquilibrium,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(Diff,[Default]), UsedName(solution,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) codility.TapeEquilibrium$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) codility.TapeEquilibrium$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of codility.TapeEquilibriumTest: Set(UsedName(TapeEquilibrium,[Default]), UsedName(solution,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe codility.JumpFrog$ has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(JumpFrog,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(solution,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) codility.JumpFrog$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) codility.JumpFrog$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of codility.JumpFrogTest: Set(UsedName(JumpFrog,[Default]), UsedName(solution,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe codility.ArrayRotation$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(AugmentedSeq,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) codility.ArrayRotation$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) codility.ArrayRotation$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of codility.ArrayRotation$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	codility.ArrayRotationTest[0m
[0m[[0m[0mdebug[0m] [0m[0mThe codility.PermMissingElement$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(AugmentedSeq,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) codility.PermMissingElement$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) codility.PermMissingElement$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of codility.PermMissingElement$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	codility.PermMissingElementTest[0m
[0m[[0m[0mdebug[0m] [0m[0mThe codility.OddOccurrencesInArray$ has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(AugmentedSeq,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0mAll member reference dependencies will be considered within this context.[0m
[0m[[0m[0mdebug[0m] [0m[0mFiles invalidated by inheriting from (external) codility.OddOccurrencesInArray$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting direct dependencies of all classes transitively invalidated by inheritance.[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting classes that directly depend on (external) codility.OddOccurrencesInArray$.[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following member ref dependencies of codility.OddOccurrencesInArray$ are invalidated:[0m
[0m[[0m[0mdebug[0m] [0m[0m	codility.OddOccurencesInArrayTest[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/OddOccurencesInArrayTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/JumpFrogTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/DataGenSupport.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/ArrayRotationTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/TapeEquilibriumTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/TestPrinterSupport.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/PermMissingElementTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(/Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/TapeEquilibriumTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/ArrayRotationTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/DataGenSupport.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/TestPrinterSupport.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/PermMissingElementTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/OddOccurencesInArrayTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/java/coding/ctci/structures/mutable/CustomArrayListSpec.java, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/JumpFrogTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/java/coding/ctci/challenges/ArrayListChallengeSpec.java)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(/Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/target/scala-2.12/test-classes/codility/JumpFrogTest.class, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/target/scala-2.12/test-classes/codility/TapeEquilibriumTest.class, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/target/scala-2.12/test-classes/codility/TestPrinterSupport.class, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/target/scala-2.12/test-classes/codility/DataGenSupport.class, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/target/scala-2.12/test-classes/codility/ArrayRotationTest.class, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/target/scala-2.12/test-classes/codility/PermMissingElementTest.class, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/target/scala-2.12/test-classes/codility/OddOccurencesInArrayTest.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set(NamesChange(codility.TapeEquilibrium$,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(Idx,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(TapeEquilibrium,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(Diff,[Default]), UsedName(solution,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]))), NamesChange(codility.JumpFrog$,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(JumpFrog,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(solution,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]))), NamesChange(codility.ArrayRotation$,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(solution,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(AugmentedSeq,[Implicit]), UsedName(ArrayRotation,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]))), NamesChange(codility.PermMissingElement$,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(PermMissingElement,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(solution,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(AugmentedSeq,[Implicit]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]))), NamesChange(codility.OddOccurrencesInArray$,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(OddOccurrencesInArray,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(solution,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(AugmentedSeq,[Implicit]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]))))[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(codility.ArrayRotationTest, codility.DataGenSupport, codility.OddOccurencesInArrayTest, codility.JumpFrogTest, codility.TestPrinterSupport, codility.TapeEquilibriumTest, codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(/Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/OddOccurencesInArrayTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/JumpFrogTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/DataGenSupport.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/ArrayRotationTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/TapeEquilibriumTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/TestPrinterSupport.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/PermMissingElementTest.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set(codility.ArrayRotationTest, codility.OddOccurencesInArrayTest, codility.JumpFrogTest, codility.TapeEquilibriumTest, codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(codility.ArrayRotationTest, codility.DataGenSupport, codility.OddOccurencesInArrayTest, codility.JumpFrogTest, codility.TestPrinterSupport, codility.TapeEquilibriumTest, codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/TapeEquilibriumTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/ArrayRotationTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/OddOccurencesInArrayTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/JumpFrogTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/DataGenSupport.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/DataGenSupport.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/TestPrinterSupport.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/ArrayRotationTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/TapeEquilibriumTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/PermMissingElementTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/OddOccurencesInArrayTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/java/coding/ctci/structures/mutable/CustomArrayListSpec.java, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/TestPrinterSupport.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/scala/coding/codility/JumpFrogTest.scala, /Users/martin/workspace/lightbend/LRO-K-lightbend-reactive-operations-with-kubernetes-0.20190204/exercises/solutions/14-deploy-lagom-cluster-kubernetes/Codility/src/test/scala/codility/PermMissingElementTest.scala, /Users/martin/workspace/byrde/CodingChallenges/src/test/java/coding/ctci/challenges/ArrayListChallengeSpec.java)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 9 sources: invalidated sources (16) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 7 Scala sources and 2 Java sources to /Users/martin/workspace/byrde/CodingChallenges/target/scala-2.12/test-classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 638516c5 for Scala compiler version 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/sunrsasign.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/jre/classes:/Users/martin/.ivy2/cache/org.scala-lang/scala-library/jars/scala-library-2.12.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/Users/martin/workspace/byrde/CodingChallenges/target/scala-2.12/test-classes:/Users/martin/workspace/byrde/CodingChallenges/target/scala-2.12/classes:/Users/martin/.ivy2/cache/org.scalactic/scalactic_2.12/bundles/scalactic_2.12-3.0.8.jar:/Users/martin/.ivy2/cache/org.scala-lang/scala-reflect/jars/scala-reflect-2.12.8.jar:/Users/martin/.ivy2/cache/org.scalatest/scalatest_2.12/bundles/scalatest_2.12-3.0.8.jar:/Users/martin/.ivy2/cache/org.scala-lang.modules/scala-xml_2.12/bundles/scala-xml_2.12-1.2.0.jar:/Users/martin/.ivy2/cache/org.scalacheck/scalacheck_2.12/jars/scalacheck_2.12-1.14.0.jar:/Users/martin/.ivy2/cache/org.scala-sbt/test-interface/jars/test-interface-1.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 1.674226542 s[0m
[0m[[0m[0mdebug[0m] [0m[0mAttempting to call com.sun.tools.javac.api.JavacTool@661ea7ed directly...[0m
[0m[[0m[0mdebug[0m] [0m[0mJava compilation took 0.079525635 s[0m
[0m[[0m[0mdebug[0m] [0m[0mJava analysis took 0.012679357 s[0m
[0m[[0m[0mdebug[0m] [0m[0mJava compilation + analysis took 0.094905613 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.codility.ArrayRotationTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.codility.ArrayRotationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.codility.ArrayRotationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.codility.ArrayRotationTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(trace,[Default]), UsedName(value,[Default]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(coding;codility;ArrayRotationTest;init;,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(ArrayRotationTest,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(evenSeed,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(unevenSeed,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(cancel,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(tracingEnabled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The coding.codility.ArrayRotationTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.codility.ArrayRotationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from codility.ArrayRotationTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(codility.ArrayRotationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(codility.ArrayRotationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(codility.ArrayRotationTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(trace,[Default]), UsedName(value,[Default]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(codility;ArrayRotationTest;init;,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(ArrayRotationTest,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(evenSeed,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(unevenSeed,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(cancel,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(tracingEnabled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The codility.ArrayRotationTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(codility.ArrayRotationTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.codility.PermMissingElementTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.codility.PermMissingElementTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(value,[Default]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(coding;codility;PermMissingElementTest;init;,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(PermMissingElementTest,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(cancel,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The coding.codility.PermMissingElementTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from codility.PermMissingElementTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(codility.PermMissingElementTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(value,[Default]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(PermMissingElementTest,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(cancel,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(codility;PermMissingElementTest;init;,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The codility.PermMissingElementTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(codility.PermMissingElementTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.codility.OddOccurencesInArrayTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.codility.OddOccurencesInArrayTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(maxDiscardedFactor,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(maxDiscarded,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(trace,[Default]), UsedName(value,[Default]), UsedName(PropertyCheckConfig2PropertyCheckConfiguration,[Implicit]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(PropertyCheckConfiguration,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(forAll,[Default]), UsedName(MinSuccessful,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(PropertyCheckConfigurable,[Default]), UsedName(maxSize,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(MinSize,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ConfiguredPropertyCheck,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(genNonEmptySeqOfMatchingPairs,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(whenever,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(generatorDrivenConfig,[Implicit]), UsedName(OddOccurencesInArrayTest,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(genOddOccurrences,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(genPosNumGreaterThanZero,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName(MaxSize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(MaxDiscarded,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(sizeRange,[Default]), UsedName(minSize,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(SizeRange,[Default]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(PropertyCheckConfigParam,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(assertionsHelper,[Default]), UsedName(coding;codility;OddOccurencesInArrayTest;init;,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(genMatchingPair,[Default]), UsedName(cancel,[Default]), UsedName(PropertyCheckConfig,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(getParams,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(Workers,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(workers,[Default]), UsedName(MaxDiscardedFactor,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(minSuccessful,[Default]), UsedName(tracingEnabled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The coding.codility.OddOccurencesInArrayTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(PropertyCheckConfig2PropertyCheckConfiguration,[Implicit]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(generatorDrivenConfig,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from codility.DataGenSupport...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(codility.DataGenSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(codility.DataGenSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(codility.DataGenSupport,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(genNonEmptySeqOfMatchingPairs,[Default]), UsedName(clone,[Default]), UsedName(genOddOccurrences,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(genPosNumGreaterThanZero,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(DataGenSupport,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(genMatchingPair,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]))) invalidates 1 classes due to The codility.DataGenSupport has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(genNonEmptySeqOfMatchingPairs,[Default]), UsedName(clone,[Default]), UsedName(genOddOccurrences,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(genPosNumGreaterThanZero,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(DataGenSupport,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(genMatchingPair,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(codility.DataGenSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.codility.TapeEquilibriumTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.codility.TapeEquilibriumTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.codility.TapeEquilibriumTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.codility.TapeEquilibriumTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(value,[Default]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(TapeEquilibriumTest,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(cancel,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(suiteName,[Default]), UsedName(coding;codility;TapeEquilibriumTest;init;,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The coding.codility.TapeEquilibriumTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.codility.TapeEquilibriumTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from codility.TapeEquilibriumTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(codility.TapeEquilibriumTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(codility.TapeEquilibriumTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(codility.TapeEquilibriumTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(value,[Default]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(TapeEquilibriumTest,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(codility;TapeEquilibriumTest;init;,[Default]), UsedName(NoArgTest,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(cancel,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The codility.TapeEquilibriumTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(codility.TapeEquilibriumTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from codility.OddOccurencesInArrayTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(codility.OddOccurencesInArrayTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(maxDiscardedFactor,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(maxDiscarded,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(trace,[Default]), UsedName(value,[Default]), UsedName(PropertyCheckConfig2PropertyCheckConfiguration,[Implicit]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(PropertyCheckConfiguration,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(forAll,[Default]), UsedName(MinSuccessful,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(PropertyCheckConfigurable,[Default]), UsedName(maxSize,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(MinSize,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ConfiguredPropertyCheck,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(genNonEmptySeqOfMatchingPairs,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(whenever,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(generatorDrivenConfig,[Implicit]), UsedName(OddOccurencesInArrayTest,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(genOddOccurrences,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(genPosNumGreaterThanZero,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName(MaxSize,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(MaxDiscarded,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(sizeRange,[Default]), UsedName(minSize,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(SizeRange,[Default]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(PropertyCheckConfigParam,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(genMatchingPair,[Default]), UsedName(cancel,[Default]), UsedName(PropertyCheckConfig,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(codility;OddOccurencesInArrayTest;init;,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(getParams,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(Workers,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(workers,[Default]), UsedName(MaxDiscardedFactor,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(minSuccessful,[Default]), UsedName(tracingEnabled,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The codility.OddOccurencesInArrayTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(PropertyCheckConfig2PropertyCheckConfiguration,[Implicit]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(generatorDrivenConfig,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from codility.JumpFrogTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(codility.JumpFrogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(codility.JumpFrogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(codility.JumpFrogTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(value,[Default]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(codility;JumpFrogTest;init;,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(JumpFrogTest,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(cancel,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The codility.JumpFrogTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(codility.JumpFrogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from codility.TestPrinterSupport...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(codility.TestPrinterSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(codility.TestPrinterSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(codility.TestPrinterSupport,ModifiedNames(changes = UsedName(TestPrinterSupport,[Default]), UsedName(trace,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(tracingEnabled,[Default]), UsedName(isInstanceOf,[Default]))) invalidates 1 classes due to The codility.TestPrinterSupport has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(TestPrinterSupport,[Default]), UsedName(trace,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(tracingEnabled,[Default]), UsedName(isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(codility.TestPrinterSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.ctci.structures.mutable.CustomArrayListSpec...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.ctci.structures.mutable.CustomArrayListSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.ctci.structures.mutable.CustomArrayListSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.ctci.structures.mutable.CustomArrayListSpec,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(coding;ctci;structures;mutable;CustomArrayListSpec;init;,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(notifyAll,[Default]), UsedName(CustomArrayListSpec,[Default]))) invalidates 1 classes due to The coding.ctci.structures.mutable.CustomArrayListSpec has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(coding;ctci;structures;mutable;CustomArrayListSpec;init;,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(notifyAll,[Default]), UsedName(CustomArrayListSpec,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.ctci.structures.mutable.CustomArrayListSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.DataGenSupport...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.DataGenSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding coding.codility.OddOccurencesInArrayTest by coding.DataGenSupport[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.codility.OddOccurencesInArrayTest, coding.DataGenSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of coding.codility.OddOccurencesInArrayTest: Set(UsedName(genOddOccurrences,[Default]), UsedName(genPosNumGreaterThanZero,[Default]), UsedName(DataGenSupport,[Default]), UsedName(ne,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.DataGenSupport,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(genNonEmptySeqOfMatchingPairs,[Default]), UsedName(clone,[Default]), UsedName(genOddOccurrences,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(genPosNumGreaterThanZero,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(DataGenSupport,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(genMatchingPair,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]))) invalidates 2 classes due to The coding.DataGenSupport has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(genNonEmptySeqOfMatchingPairs,[Default]), UsedName(clone,[Default]), UsedName(genOddOccurrences,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(genPosNumGreaterThanZero,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(DataGenSupport,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(genMatchingPair,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.codility.OddOccurencesInArrayTest, coding.DataGenSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(coding.codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.ctci.challenges.ArrayListChallengeSpec...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.ctci.challenges.ArrayListChallengeSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.ctci.challenges.ArrayListChallengeSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.ctci.challenges.ArrayListChallengeSpec,ModifiedNames(changes = UsedName(coding;ctci;challenges;ArrayListChallengeSpec;init;,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(ArrayListChallengeSpec,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The coding.ctci.challenges.ArrayListChallengeSpec has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(coding;ctci;challenges;ArrayListChallengeSpec;init;,[Default]), UsedName(toString,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(ArrayListChallengeSpec,[Default]), UsedName(wait,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.ctci.challenges.ArrayListChallengeSpec)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.TestPrinterSupport...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.TestPrinterSupport)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding coding.codility.ArrayRotationTest by coding.TestPrinterSupport[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding coding.codility.OddOccurencesInArrayTest by coding.TestPrinterSupport[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.codility.ArrayRotationTest, coding.TestPrinterSupport, coding.codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of coding.codility.ArrayRotationTest: Set(UsedName(TestPrinterSupport,[Default]), UsedName(tracingEnabled,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of coding.codility.OddOccurencesInArrayTest: Set(UsedName(TestPrinterSupport,[Default]), UsedName(trace,[Default]), UsedName(ne,[Default]), UsedName(tracingEnabled,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.TestPrinterSupport,ModifiedNames(changes = UsedName(TestPrinterSupport,[Default]), UsedName(trace,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(tracingEnabled,[Default]), UsedName(isInstanceOf,[Default]))) invalidates 3 classes due to The coding.TestPrinterSupport has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(TestPrinterSupport,[Default]), UsedName(trace,[Default]), UsedName(toString,[Default]), UsedName(##,[Default]), UsedName(clone,[Default]), UsedName(synchronized,[Default]), UsedName($init$,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(==,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(asInstanceOf,[Default]), UsedName(tracingEnabled,[Default]), UsedName(isInstanceOf,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.codility.ArrayRotationTest, coding.TestPrinterSupport, coding.codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(coding.codility.ArrayRotationTest, coding.codility.OddOccurencesInArrayTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from coding.codility.JumpFrogTest...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(coding.codility.JumpFrogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(coding.codility.JumpFrogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(coding.codility.JumpFrogTest,ModifiedNames(changes = UsedName(newAssertionFailedException,[Default]), UsedName(IgnoreVerbStringTaggedAs,[Default]), UsedName(execute$default$3,[Default]), UsedName(styleName,[Default]), UsedName(expectedTestCount,[Default]), UsedName(alert,[Default]), UsedName(it,[Default]), UsedName(Equalizer,[Default]), UsedName(IgnoreVerbString,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(value,[Default]), UsedName(nestedSuites,[Default]), UsedName(defaultEquality,[Default]), UsedName(decided,[Default]), UsedName(registerTest,[Default]), UsedName(testNames,[Default]), UsedName(not,[Default]), UsedName(contain,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(assertThrows,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(allElementsOf,[Default]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(be,[Default]), UsedName(exactly,[Default]), UsedName(===,[Default]), UsedName(include,[Default]), UsedName(KeyWord,[Default]), UsedName(behave,[Default]), UsedName(assertCompiles,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(<,[Default]), UsedName(<=,[Default]), UsedName(note,[Default]), UsedName(toString,[Default]), UsedName(InAndIgnoreMethodsAfterTaggedAs,[Default]), UsedName(sorted,[Default]), UsedName(assume,[Default]), UsedName(##,[Default]), UsedName(info,[Default]), UsedName(length,[Default]), UsedName(TheyVerbStringTaggedAs,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(withFixture,[Default]), UsedName(DeterminedWord,[Default]), UsedName(newTestCanceledException,[Default]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(createCatchReporter,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(AnWord,[Default]), UsedName(key,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(suiteId,[Default]), UsedName(coding;codility;JumpFrogTest;init;,[Default]), UsedName(regex,[Default]), UsedName(ItVerbStringTaggedAs,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(trap,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(execute,[Default]), UsedName(oneOf,[Default]), UsedName(message,[Default]), UsedName(readable,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(execute$default$5,[Default]), UsedName(defined,[Default]), UsedName(ignore,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(writable,[Default]), UsedName(InAndIgnoreMethods,[Default]), UsedName(TheyVerbString,[Default]), UsedName(RegexWrapper,[Default]), UsedName(runTests,[Default]), UsedName(clone,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(StringMustWrapperForVerb,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ItVerbString,[Default]), UsedName(ValueWord,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(inOrder,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(behavior,[Default]), UsedName(synchronized,[Default]), UsedName(size,[Default]), UsedName(of,[Default]), UsedName(after,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(RegexWord,[Default]), UsedName(doCollected,[Default]), UsedName(StringCanWrapperForVerb,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(typeCheck,[Default]), UsedName($init$,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(an,[Default]), UsedName(assertTypeError,[Default]), UsedName(between,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(runTest,[Default]), UsedName(equal,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(intercept,[Default]), UsedName(>,[Default]), UsedName(all,[Default]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(definedAt,[Default]), UsedName(thrownBy,[Default]), UsedName(oneElementOf,[Default]), UsedName(BehaviorWord,[Default]), UsedName(atMost,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(startWith,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(equals,[Default]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(only,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(wait,[Default]), UsedName($isInstanceOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(AssertionsHelper,[Default]), UsedName(markup,[Default]), UsedName(atLeast,[Default]), UsedName(ItWord,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(allOf,[Default]), UsedName(notify,[Default]), UsedName(have,[Default]), UsedName(hashCode,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(run,[Default]), UsedName(==,[Default]), UsedName(JumpFrogTest,[Default]), UsedName(compile,[Default]), UsedName(!=,[Default]), UsedName(succeed,[Default]), UsedName(inOrderOnly,[Default]), UsedName(TheyWord,[Default]), UsedName(tags,[Default]), UsedName(execute$default$1,[Default]), UsedName(AWord,[Default]), UsedName(TheAfterWord,[Default]), UsedName(exist,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(>=,[Default]), UsedName(testDataFor,[Default]), UsedName(noException,[Default]), UsedName(execute$default$7,[Default]), UsedName(assertResult,[Default]), UsedName(atMostOneOf,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(endWith,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(runNestedSuites,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(fail,[Default]), UsedName(finalize,[Default]), UsedName(assertionsHelper,[Default]), UsedName(DecidedWord,[Default]), UsedName(a,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(fullyMatch,[Default]), UsedName(no,[Default]), UsedName(execute$default$6,[Default]), UsedName(every,[Default]), UsedName(cancel,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(rerunner,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(notifyAll,[Default]), UsedName(ne,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(the,[Default]), UsedName(IgnoreWord,[Default]), UsedName(suiteName,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(determined,[Default]), UsedName(eq,[Default]), UsedName(noElementsOf,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(noneOf,[Default]), UsedName(withClue,[Default]), UsedName(assert,[Default]), UsedName(execute$default$4,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(they,[Default]), UsedName(empty,[Default]))) invalidates 1 classes due to The coding.codility.JumpFrogTest has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(convertToInAndIgnoreMethodsAfterTaggedAs,[Implicit]), UsedName(shorthandSharedTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(shorthandTestRegistrationFunction,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(convertToStringMustWrapperForVerb,[Implicit]), UsedName(convertToInAndIgnoreMethods,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringCanWrapper,[Implicit]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(coding.codility.JumpFrogTest)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
